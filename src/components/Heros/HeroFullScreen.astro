---
import { HERO_IMG_DIMENSIONS, HERO_IMG_PATH, LOGO_NAME } from "../../config";
import Icon from "../Icon.astro";
import Wrapper from "../Wrapper.astro";
import Image from '../Image.astro'

interface Props {
    heading : string,
    subheading : string,
    primaryCTAText : string,
    primaryCTAIcon? : string,
    primaryCTALink : string,
    secondaryCTAText : string,
    secondaryCTALink : string,
    secondaryCTAIcon? : string,
    align? : 'center' | 'left' | 'right'
    
    /**
     * @prop heading (string)
     * @prop subheading (string)
     * @prop primaryCTAText (string)
     * @prop primaryCTAIcon (string)
     * @prop primaryCTALink (string)
     * @prop secondaryCTAText (string)
     * @prop secondaryCTALink (string)
     * @prop secondaryCTAIcon (string)
     * @prop align : 'center' | 'left' (Default) | 'right'
     */
    props? : true
}

const {
    heading,
    subheading,
    primaryCTAText,
    primaryCTALink,
    primaryCTAIcon,
    secondaryCTAText,
    secondaryCTALink,
    secondaryCTAIcon,
    align = 'left'
} = Astro.props

---


<div class="absolute top-0 left-0 w-full h-screen z-[-1] bg-primary-600">
    <Image src={HERO_IMG_PATH} alt={LOGO_NAME} width={HERO_IMG_DIMENSIONS.width} height={HERO_IMG_DIMENSIONS.height} class="w-screen h-screen object-cover mix-blend-overlay" />
</div>

<section id="hero">

    <Wrapper 
        width="max" 
        padding="inline"
        class={`
            hero-wrapper grid min-h-screen
            ${align === 'left' || align === 'right' ? 'items-center' : ''}
            ${align === 'center' ? 'place-items-center' : ''}
            ${align === 'right' ? ' justify-items-end' : ''}
        `}
    >

        <div class={`[]
            grid gap-8 md:w-2/3
            ${align === 'left' ? '' : ''}
            ${align === 'center' ? 'text-center' : ''}
        `}>

            <h1>
                {heading}
            </h1>

            <p>
                {subheading}
            </p>

            <div class={`
                flex items-center gap-2
                ${align === 'center' ? 'justify-center' : ''}
            `}>
                
                <a href={primaryCTALink} class="primary-hero-CTA">
                    {primaryCTAIcon && <Icon icon={primaryCTAIcon} /> }
                    {primaryCTAText}
                </a>
                
                <a href={secondaryCTALink} class="secondary-hero-CTA">
                    {secondaryCTAIcon && <Icon icon={secondaryCTAIcon} /> }
                    {secondaryCTAText}
                </a>

            </div>

        </div>

    </Wrapper>

</section>


<style>

h1 {
    font-size: 2.5rem !important;
    line-height: 2.8rem;
    letter-spacing: 0.05rem;
    font-weight: 600 !important;
    color : var(--hero-text-color);
}

p {
    font-size : 1.3rem;
    color : var(--hero-text-color);
}

.primary-hero-CTA,
.secondary-hero-CTA {
    display : flex;
    align-items: center;
    padding : 0.75rem 1.25rem;
    font-weight : 600;
    letter-spacing: 0.05rem;
}

.primary-hero-CTA {
    background-color : var(--hero-CTA-bg-color);
    color : var(--hero-CTA-text-color);
}

.primary-hero-CTA:hover, .primary-hero-CTA:focus {
    background-color : var(--hero-CTA-bg-color-hover);
    color : var(--hero-CTA-text-color-hover);
}

.secondary-hero-CTA {
    color : var(--hero-text-color);
}

.secondary-hero-CTA:hover, .secondary-hero-CTA:focus {
    text-decoration: underline;
}

</style>



<script>

function sizeHeroToViewportHeight() {
    
    const heroWrapper = document.querySelector('.hero-wrapper') as HTMLDivElement
    const header      = document.querySelector('header') as HTMLDivElement

    const heroScreenSpace = window.innerHeight - header.getBoundingClientRect().height
    const heroHeight      = window.innerWidth > 768 ? heroScreenSpace : heroScreenSpace + 65
    
    heroWrapper.style.minHeight = heroHeight + 'px'
}

window.addEventListener('DOMContentLoaded', sizeHeroToViewportHeight)

// Dont resize on mobile to avoid content shifting due to dynamic viewport height
if( window.innerWidth > 768) {
    window.addEventListener('resize', sizeHeroToViewportHeight)
}



</script>