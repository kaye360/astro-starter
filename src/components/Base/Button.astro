---
import type { HTMLTag, Polymorphic } from 'astro/types'

type Props<HTMLElement extends HTMLTag> = Polymorphic<{ 

    /**
     * Style of button
     */
    variant? : 'fill' | 'outline' | 'ghost',

    /**
     * Link href of button if button is a link
     */
    href? : string,

    /**
     * Type of element the button should be. Default \<button>
     */
    as : HTMLElement,

    /**
     * Extra class names
     */
    class? : string,

    /**
     * @props variant : 'fill' | 'outline' | 'ghost' - Default 'fill'
     * @props href? : string
     * @props as? : HTMLElement
     * @props class? : string
     */
    props? : true
}>

const { 
    variant = 'fill',
    href = null,
    as : Element = 'div',
    class: className,
    ...props
} = Astro.props

---

<Element 
    class:list={[
        'fic-2 justify-center px-4 py-2 font-normal tracking-wide rounded-md border transition-all active:scale-95', 

        variant === 'fill' && 
            'border-primary-500 hover:border-secondary-500 bg-primary-500 hover:bg-secondary-500 text-white ',

        variant === 'outline' && 
            'border-primary-500 hover:border-secondary-500 text-primary-600 hover:text-secondary-600',

        variant === 'ghost' && 
            'border-transparent hover:underline hover:border-primary-500 active:bg-secondary-500',

        className
    ]}
    { ...props }
    { ...( href && { href } ) }
>
    <slot />
</Element>